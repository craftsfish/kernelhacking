Linux设备和驱动模型

理解Linux设备与驱动模型对设备驱动的开发非常关键。内核2.6版本引入的统一的设备模型为描述设备及其拓扑结构提供了机制。Linux设备和驱动模型以统一的方式来管理设备，驱动以及总线。这样做有如下优点：
	减少代码冗余
	代码结构清晰，设备驱动与控制器驱动相互独立，将驱动从具体的设备描述中抽取出来
	查看系统所有设备的状态，功耗以及关联的总线，决定使用哪个驱动
	查看系统完整的设备树结构，包括所有的总线与桥接控制器
	提供了将设备和驱动互相关联的机制
	将设备从具体的拓扑结构抽象出来，根据类型来划分，比如输入设备

设备模型的涉及以下术语：
	设备：	连接到总线上的物理或者虚拟对象
	驱动：	负责检测并驱动设备的代码，包含对设备的管理功能
	总线：	为设备提供连接入口

设备模型围绕3个主要的数据结构展开：
	1： struct bus_type，用来描述一种类型的总线(比如USB， PCI， I2C)
	2： struct device_driver， 描述了能够处理特定总线上的特定设备的驱动程序
	3:	struct device，描述连接在总线上的具体设备

总线驱动：
	每个内核支持的总线都有一个对应的通用总线驱动。设备和处理器之间通过总线连接。为了统一设备驱动模型，对于例外情况，系统提供了抽象的"platform"总线。
