空间划分 {
	vmalloc是为了将不连续的page组合成连续的虚拟地址空间?
	persist map
	fixed_addresses保留虚拟地址尾部的一段空间作为固定用途{
		FIX_KMAP_BEGIN,	/* reserved pte's for temporary kernel mappings */
		FIX_KMAP_END = FIX_KMAP_BEGIN+(KM_TYPE_NR*NR_CPUS)-1,
	}
}
Permanent kernel mappings, kmap, 将high memory映射到persist map空间,might_sleep
Temporary kernel mappings, kmap_atomic, 将high memory映射到fixed_addresses空间,固定用途，比如user_1，可用于中断环境
3e4d3af501cccdc8a8cca41bdbe57d54ad7e7e73将原来的固定用途改为栈，不再区分具体用途

PAGE_SHIFT在一个page table entry内寻址需要的比特数
PAGE_SIZE一个page table entry表示的地址空间大小
PMD_SHIFT在一个pmd entry内寻址需要的比特数
PMD_SIZE一个pmd entry表示的地址空间大小
PTRS PER PGD is the number of pointers in the PGD

pte, pmd有可能存在于high memory，对应的pte_alloc_kernel/pte_alloc_map决定是否可以从high memory分配

thread是通过共享mm_struct实现的
kernel thread的task_struct→mm是NULL,调用switch_mm的时候从previous task偷一个过来存储在task_struct→active_mm

Major page faults occur when data has to be read from disk, which is an expensive operation, or the fault is referred to as a minor, or soft, page fault.

node
zone

page cache同时存在于address space和lru list中？address space通过index查找指针，lru中通过list_head链接

MAP_PRIVATE: 映射文件，但是可以独立修改，不能被写回
MAP_ANONYMOUS: 不与任何文件关联

所有的可被回收的page(file mapped, annonymous)都被维护在zone->active/inactive list里面，需要回收的时候对他们进行扫描。也就是说可回收内存是可以被存储到block设备的？

乱序映射的VMA，整体对应的还是连续的文件页，只不过内部的对应关系不是顺序对应的?多个乱序VMA可以以不同的映射关系对应同一个文件连续页？比如对于shared VMA中的某个执行部分remap?
反向查找page cache对应的pte的时候，如果是乱序映射的一块VMA，如何找到对应的pte?暴力扫描文件被乱序映射到的所有VMA

try_to_free_pages -> 控制回收力度
shrink_caches -> 回收zone list
shrink_zone -> 回收单个zone，补充inactive page list
shrink_cache -> 计算出inactive page candidate list
shrink_list -> 从收集的inactive page candidate list中回收

一个page是否被share取决于mapcount
mapping非空并且最低位位0,page映射到文件
mapping非空并且最低位位1,page是匿名页，mapping指向anon_vma
mapping为空，page位于swap cache中

