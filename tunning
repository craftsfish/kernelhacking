slab {
	cache limit
}

performance first
down limit: for performance
up limit: for power

bottleneck inspection {
	workload profile {
		cpu: usage
		ddr: bw
	}
}

软件在设计之初就应该将性能问题纳入考虑，建立恰当的性能评估体系。
软件开发的目的简单的来说可以理解为使用资源提供功能，和现实生活中的生产制造本质上没有区别。
资源本身是有代价的，不可能无限制的使用，这就间接的要求我们在实现特定的功能需求时最小化资源的使用。
抛开时间，功耗以及硬件配置等资源的消耗谈性能是没有意义的。
所以对于任何一个软件功能模块，性能评估体系除了包含功能性指标，比如响应时间，吞吐量等，还应该包含能耗，内存用量，CPU算力要求等资源性指标。
良好的算法设计是合理利用资源实现既定目标的根本保障。
这也是为什么算法会被业界普遍采用作为衡量工程师能力标准的重要原因。

统计资源使用的分布情况，然后针对占比较大的部分进行优化。
如何评估针对特定workload，各种计算资源的合理消耗，然后根据实际情况和期望直接的差异大小，优先选择优化目标。
具体的资源优化时，需要考虑优化的难度，也就是人力资源的消耗。

对于一个具体的参数，应该要给出相应的调校方法，哪些情况下需要调整参数。
对于具体的性能指标，哪些参数会影响该性能，要有据可查形成文档。
参数和性能是多对多关系，构建完整的文档和数据库，方便快速的查阅。
